{"version":3,"sources":["Components/Add.js","Components/Item.js","Utils/api.js","App.js","serviceWorker.js","index.js"],"names":["Add","props","className","type","value","onChange","newItemValue","onClick","addItem","Item","id","name","deleteItem","axios","get","delete","data","post","App","state","loaded","newItem","handleChange","e","setState","target","addItemHandler","api","then","res","items","deleteItemHandler","index","splice","catch","err","console","log","this","map","item","i","key","_id","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"qTAgBeA,G,MAbH,SAACC,GACZ,OACC,yBAAKC,UAAU,OACd,yBAAKA,UAAU,iBACd,2BAAOC,KAAK,OAAOC,MAAOH,EAAMG,MAAOC,SAAUJ,EAAMK,eACvD,yBAAKJ,UAAU,MAAMK,QAASN,EAAMO,SACnC,uBAAGN,UAAU,0BCOHO,G,MAbF,SAACR,GACb,OACC,yBAAKC,UAAU,OAAOQ,GAAIT,EAAMS,IAC/B,yBAAKR,UAAU,kBACd,4BAAKD,EAAMU,MACX,yBAAKT,UAAU,MAAMK,QAASN,EAAMW,YACnC,uBAAGV,UAAU,0B,gBCPH,EACJ,WACT,OAAOW,IAAMC,IAAI,eAFJ,EAIF,SAACJ,GACZ,OAAOG,IAAME,OAAO,cAAgBL,IALvB,EAOL,SAACM,GACT,OAAOH,IAAMI,KAAK,aAAcD,IC8DnBE,G,kNAjEdC,MAAQ,CACPC,QAAQ,EACRC,QAAS,I,EAiBVC,aAAe,SAACC,GACf,EAAKC,SAAS,CAAEH,QAASE,EAAEE,OAAOrB,S,EAGnCsB,eAAiB,WAChBC,EAAY,CAAEhB,KAAM,EAAKQ,MAAME,UAAWO,MAAK,kBAC9CD,IAAeC,MAAK,SAACC,GACpB,EAAKL,SAAS,CAAEM,MAAOD,EAAIb,KAAMK,QAAS,Y,EAM7CU,kBAAoB,SAACC,EAAOtB,GAC3BiB,EAAejB,GACf,IAAMoB,EAAK,YAAO,EAAKX,MAAMW,OAC7BA,EAAMG,OAAOD,EAAO,GACpB,EAAKR,SAAS,CAAEM,MAAOA,K,kEA/BH,IAAD,OACnBH,IAEEC,MAAK,SAACC,GACFA,EAAIb,MACP,EAAKQ,SAAS,CACbM,MAAOD,EAAIb,KACXI,QAAQ,OAIVc,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,Q,+BAuBpB,IAAD,OACR,OACC,yBAAKjC,UAAU,OACd,4CACA,kBAAC,EAAD,CACCE,MAAOkC,KAAKnB,MAAME,QAClBb,QAAS,kBAAM,EAAKkB,kBACpBpB,aAAcgC,KAAKhB,eAEnBgB,KAAKnB,MAAMW,OAASQ,KAAKnB,MAAMC,OAC7BkB,KAAKnB,MAAMW,MAAMS,KAAI,SAACC,EAAMC,GAC5B,OACC,kBAAC,EAAD,CACCC,IAAKD,EACL/B,GAAI8B,EAAKG,IACThC,KAAM6B,EAAK7B,KACXC,WAAY,kBAAM,EAAKmB,kBAAkBU,EAAGD,EAAKG,WAInD,U,GA5DWC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdzB,OAAM,SAAA0B,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.4d4ba4cc.chunk.js","sourcesContent":["import React from 'react';\nimport './Add.css';\n\nconst Add = (props) => {\n\treturn (\n\t\t<div className='add'>\n\t\t\t<div className='add-component'>\n\t\t\t\t<input type='text' value={props.value} onChange={props.newItemValue} />\n\t\t\t\t<div className='btn' onClick={props.addItem}>\n\t\t\t\t\t<i className='fas fa-cart-plus'></i>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Add;\n","import React from 'react';\nimport './Item.css';\n\nconst Item = (props) => {\n\treturn (\n\t\t<div className='item' id={props.id}>\n\t\t\t<div className='item-component'>\n\t\t\t\t<h2>{props.name}</h2>\n\t\t\t\t<div className='btn' onClick={props.deleteItem}>\n\t\t\t\t\t<i className='fas fa-trash-alt'></i>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Item;\n","import axios from 'axios';\n\nexport default {\n\tgetItems: () => {\n\t\treturn axios.get('/api/items');\n\t},\n\tdeleteItem: (id) => {\n\t\treturn axios.delete('/api/items/' + id);\n\t},\n\taddItem: (data) => {\n\t\treturn axios.post('/api/items', data);\n\t}\n};\n","import React, { Component } from 'react';\nimport Add from './Components/Add';\nimport Item from './Components/Item';\nimport api from '../src/Utils/api';\nimport './App.css';\n\nclass App extends Component {\n\tstate = {\n\t\tloaded: false,\n\t\tnewItem: ''\n\t};\n\n\tcomponentDidMount() {\n\t\tapi\n\t\t\t.getItems()\n\t\t\t.then((res) => {\n\t\t\t\tif (res.data) {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\titems: res.data,\n\t\t\t\t\t\tloaded: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((err) => console.log(err));\n\t}\n\n\thandleChange = (e) => {\n\t\tthis.setState({ newItem: e.target.value });\n\t};\n\n\taddItemHandler = () => {\n\t\tapi.addItem({ name: this.state.newItem }).then(() =>\n\t\t\tapi.getItems().then((res) => {\n\t\t\t\tthis.setState({ items: res.data, newItem: '' });\n\t\t\t})\n\t\t);\n\t\t// const items = [...this.state.items];\n\t};\n\n\tdeleteItemHandler = (index, id) => {\n\t\tapi.deleteItem(id);\n\t\tconst items = [...this.state.items];\n\t\titems.splice(index, 1);\n\t\tthis.setState({ items: items });\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<h1>Grocery List</h1>\n\t\t\t\t<Add\n\t\t\t\t\tvalue={this.state.newItem}\n\t\t\t\t\taddItem={() => this.addItemHandler()}\n\t\t\t\t\tnewItemValue={this.handleChange}\n\t\t\t\t/>\n\t\t\t\t{this.state.items && this.state.loaded\n\t\t\t\t\t? this.state.items.map((item, i) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Item\n\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\tid={item._id}\n\t\t\t\t\t\t\t\t\tname={item.name}\n\t\t\t\t\t\t\t\t\tdeleteItem={() => this.deleteItemHandler(i, item._id)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t  })\n\t\t\t\t\t: null}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}